{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TFIDF",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "metadata": {
        "id": "7_sA0JYt-7TM",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Sub Topic: Sentiment Analysis using Yelp reviews\n"
      ]
    },
    {
      "metadata": {
        "id": "4nPLWGUF7rac",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "We have already explored the dataset and found interesting insights from it. Yelp is basically a service that lets users post reviews about a business specially restaurants and rate the business out of 5. So, there is a strong relationship between review text and the rating. So, here we will try to predict a sentiment (positive sentiment corresponds to a rating of 3 or above and negative sentiment corresponds to a rating of 2 or below) "
      ]
    },
    {
      "metadata": {
        "id": "uEjXNF-3jt71",
        "colab_type": "code",
        "outputId": "3c0db831-c57a-4c33-ea08-8b0c2809dec2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        }
      },
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n",
            "\n",
            "Enter your authorization code:\n",
            "··········\n",
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "Zrz41ZUAACot",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "reviews.json file was really big (4.5GB) with approximately 6 million entries in it. So, it was taking a very long time for it to load into a pandas dataframe. So, we converted the json file into csv format first for it to be loaded into pandas dataframe quickly."
      ]
    },
    {
      "metadata": {
        "id": "yYP2X2cG_4nu",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "'''\n",
        "import json\n",
        "import csv\n",
        "\n",
        "#json_file = open('C:/Nupur Drive/UMBC/DS/Final Project/yelp_academic_dataset_review.json','r',encoding='utf8', errors='ignore') \n",
        "#lines = 5000000\n",
        "review_data = open('C:/Nupur Drive/UMBC/DS/Final Project/review3.csv', 'w',encoding='utf8')\n",
        "csvwriter = csv.writer(review_data)\n",
        "#json_file = open('C:/Nupur Drive/UMBC/DS/Final Project/yelp_academic_dataset_review.json','r',encoding='utf8', errors='ignore')\n",
        "header = ['review_id','user_id','business_id','stars','date','text','useful','funny','cool']\n",
        "csvwriter.writerow(header)\n",
        "with open('C:/Nupur Drive/UMBC/DS/Final Project/yelp_academic_dataset_review.json','r',encoding='utf8', errors='ignore') as json_file:\n",
        "#while(lines>0):\n",
        "    \n",
        "    for data in json_file:\n",
        "        #data = json_file.readline()\n",
        "        #print (data)   \n",
        "        #print (type(data))\n",
        "        \n",
        "        try:\n",
        "            data = json.loads(data)\n",
        "            l = []\n",
        "            for emp in data:\n",
        "                l.append(data[emp])\n",
        "    \n",
        "            #print (l)\n",
        "            csvwriter.writerow(l)\n",
        "        except Exception as e:\n",
        "            print (\"line no: \",lines,e)\n",
        "        \n",
        "        #print (type(data))\n",
        "        #data = list(map(json.loadsdata)) \n",
        "    \n",
        "    #lines -= 1\n",
        "\n",
        "review_data.close()\n",
        "json_file.close()\n",
        "\n",
        "r = pd.read_csv('C:/Nupur Drive/UMBC/DS/Final Project/review3.csv')\n",
        "r\n",
        "'''"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "dl2WAZiHkYyx",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "DG8wJkHFA69p",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Load the reviews.csv file intp pandas dataframe"
      ]
    },
    {
      "metadata": {
        "id": "-vZZGc7PkuqV",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "r = pd.read_csv('/content/drive/My Drive/review_new.csv')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "8j2F9ngDkzOs",
        "colab_type": "code",
        "outputId": "28f908ae-8fd9-4119-9ad4-d042272dab31",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 598
        }
      },
      "cell_type": "code",
      "source": [
        "r.head(5)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>review_id</th>\n",
              "      <th>user_id</th>\n",
              "      <th>business_id</th>\n",
              "      <th>stars</th>\n",
              "      <th>date</th>\n",
              "      <th>text</th>\n",
              "      <th>useful</th>\n",
              "      <th>funny</th>\n",
              "      <th>cool</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>x7mDIiDB3jEiPGPHOmDzyw</td>\n",
              "      <td>msQe1u7Z_XuqjGoqhB0J5g</td>\n",
              "      <td>iCQpiavjjPzJ5_3gPD5Ebg</td>\n",
              "      <td>2</td>\n",
              "      <td>2011-02-25</td>\n",
              "      <td>The pizza was okay. Not the best I've had. I p...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>dDl8zu1vWPdKGihJrwQbpw</td>\n",
              "      <td>msQe1u7Z_XuqjGoqhB0J5g</td>\n",
              "      <td>pomGBqfbxcqPv14c3XH-ZQ</td>\n",
              "      <td>5</td>\n",
              "      <td>2012-11-13</td>\n",
              "      <td>I love this place! My fiance And I go here atl...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>LZp4UX5zK3e-c5ZGSeo3kA</td>\n",
              "      <td>msQe1u7Z_XuqjGoqhB0J5g</td>\n",
              "      <td>jtQARsP6P-LbkyjbO1qNGg</td>\n",
              "      <td>1</td>\n",
              "      <td>2014-10-23</td>\n",
              "      <td>Terrible. Dry corn bread. Rib tips were all fa...</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Er4NBWCmCD4nM8_p1GRdow</td>\n",
              "      <td>msQe1u7Z_XuqjGoqhB0J5g</td>\n",
              "      <td>elqbBhBfElMNSrjFqW3now</td>\n",
              "      <td>2</td>\n",
              "      <td>2011-02-25</td>\n",
              "      <td>Back in 2005-2007 this place was my FAVORITE t...</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>jsDu6QEJHbwP2Blom1PLCA</td>\n",
              "      <td>msQe1u7Z_XuqjGoqhB0J5g</td>\n",
              "      <td>Ums3gaP2qM3W1XcA5r6SsQ</td>\n",
              "      <td>5</td>\n",
              "      <td>2014-09-05</td>\n",
              "      <td>Delicious healthy food. The steak is amazing. ...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                review_id                 user_id             business_id  \\\n",
              "0  x7mDIiDB3jEiPGPHOmDzyw  msQe1u7Z_XuqjGoqhB0J5g  iCQpiavjjPzJ5_3gPD5Ebg   \n",
              "1  dDl8zu1vWPdKGihJrwQbpw  msQe1u7Z_XuqjGoqhB0J5g  pomGBqfbxcqPv14c3XH-ZQ   \n",
              "2  LZp4UX5zK3e-c5ZGSeo3kA  msQe1u7Z_XuqjGoqhB0J5g  jtQARsP6P-LbkyjbO1qNGg   \n",
              "3  Er4NBWCmCD4nM8_p1GRdow  msQe1u7Z_XuqjGoqhB0J5g  elqbBhBfElMNSrjFqW3now   \n",
              "4  jsDu6QEJHbwP2Blom1PLCA  msQe1u7Z_XuqjGoqhB0J5g  Ums3gaP2qM3W1XcA5r6SsQ   \n",
              "\n",
              "   stars        date                                               text  \\\n",
              "0      2  2011-02-25  The pizza was okay. Not the best I've had. I p...   \n",
              "1      5  2012-11-13  I love this place! My fiance And I go here atl...   \n",
              "2      1  2014-10-23  Terrible. Dry corn bread. Rib tips were all fa...   \n",
              "3      2  2011-02-25  Back in 2005-2007 this place was my FAVORITE t...   \n",
              "4      5  2014-09-05  Delicious healthy food. The steak is amazing. ...   \n",
              "\n",
              "   useful  funny  cool  \n",
              "0       0      0     0  \n",
              "1       0      0     0  \n",
              "2       3      1     1  \n",
              "3       2      0     0  \n",
              "4       0      0     0  "
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "metadata": {
        "id": "v3Eoq-CklqbZ",
        "colab_type": "code",
        "outputId": "775f61fc-5aec-474e-f204-d95a8032f9aa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 615
        }
      },
      "cell_type": "code",
      "source": [
        "r.tail(5)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>review_id</th>\n",
              "      <th>user_id</th>\n",
              "      <th>business_id</th>\n",
              "      <th>stars</th>\n",
              "      <th>date</th>\n",
              "      <th>text</th>\n",
              "      <th>useful</th>\n",
              "      <th>funny</th>\n",
              "      <th>cool</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5996991</th>\n",
              "      <td>ulyWlcLQ9CYleyh8lYOKVw</td>\n",
              "      <td>LOUrYMvz-R0YPr0E80gk1A</td>\n",
              "      <td>abIF7pw1Hyu-eVW3LwNhyg</td>\n",
              "      <td>1</td>\n",
              "      <td>2016-02-29</td>\n",
              "      <td>I must admit i have had very bad experience he...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5996992</th>\n",
              "      <td>yPkClnqE7O7IibSuuswwrw</td>\n",
              "      <td>FaAITTapZkngBDJus4niJQ</td>\n",
              "      <td>fbLYRHIZAt3q839whhaBUg</td>\n",
              "      <td>1</td>\n",
              "      <td>2017-07-06</td>\n",
              "      <td>Worst service experience in awhile. I usually ...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5996993</th>\n",
              "      <td>ixnpFW4VZ3RFiOMSacg2ng</td>\n",
              "      <td>FaAITTapZkngBDJus4niJQ</td>\n",
              "      <td>b_8jCti0vuouJ_fjZpdmZw</td>\n",
              "      <td>4</td>\n",
              "      <td>2018-04-14</td>\n",
              "      <td>Loved the location, the patio, the service, an...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5996994</th>\n",
              "      <td>UeLaZUk5TnqwUJ_uS6u-og</td>\n",
              "      <td>NOrAsGtOH9BwPpcRWgo4-g</td>\n",
              "      <td>wY3dlpLa0BHfDENYAPYuZA</td>\n",
              "      <td>1</td>\n",
              "      <td>2018-04-07</td>\n",
              "      <td>I absolutely hate this place. I would give it ...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5996995</th>\n",
              "      <td>misKlgKbNQXt-Zzd8PEdCw</td>\n",
              "      <td>NOrAsGtOH9BwPpcRWgo4-g</td>\n",
              "      <td>6E4i0NHTRAgpwbbRwZhlnw</td>\n",
              "      <td>1</td>\n",
              "      <td>2018-06-07</td>\n",
              "      <td>The first and the last time I will go there. M...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                      review_id                 user_id  \\\n",
              "5996991  ulyWlcLQ9CYleyh8lYOKVw  LOUrYMvz-R0YPr0E80gk1A   \n",
              "5996992  yPkClnqE7O7IibSuuswwrw  FaAITTapZkngBDJus4niJQ   \n",
              "5996993  ixnpFW4VZ3RFiOMSacg2ng  FaAITTapZkngBDJus4niJQ   \n",
              "5996994  UeLaZUk5TnqwUJ_uS6u-og  NOrAsGtOH9BwPpcRWgo4-g   \n",
              "5996995  misKlgKbNQXt-Zzd8PEdCw  NOrAsGtOH9BwPpcRWgo4-g   \n",
              "\n",
              "                    business_id  stars        date  \\\n",
              "5996991  abIF7pw1Hyu-eVW3LwNhyg      1  2016-02-29   \n",
              "5996992  fbLYRHIZAt3q839whhaBUg      1  2017-07-06   \n",
              "5996993  b_8jCti0vuouJ_fjZpdmZw      4  2018-04-14   \n",
              "5996994  wY3dlpLa0BHfDENYAPYuZA      1  2018-04-07   \n",
              "5996995  6E4i0NHTRAgpwbbRwZhlnw      1  2018-06-07   \n",
              "\n",
              "                                                      text  useful  funny  \\\n",
              "5996991  I must admit i have had very bad experience he...       0      0   \n",
              "5996992  Worst service experience in awhile. I usually ...       0      1   \n",
              "5996993  Loved the location, the patio, the service, an...       0      0   \n",
              "5996994  I absolutely hate this place. I would give it ...       0      0   \n",
              "5996995  The first and the last time I will go there. M...       0      0   \n",
              "\n",
              "         cool  \n",
              "5996991     1  \n",
              "5996992     0  \n",
              "5996993     1  \n",
              "5996994     0  \n",
              "5996995     0  "
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "metadata": {
        "id": "YsYXnES-lt7d",
        "colab_type": "code",
        "outputId": "6b618432-8c0a-4a62-a996-751087614533",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "r.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5996996, 9)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "metadata": {
        "id": "tiX81FSxl2zH",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "r_new = pd.DataFrame(r)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "P00ggG6yl74t",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "r1 = r_new"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "J4zkyXh2BPjw",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "We are only interested in 'text' column which has actual review text and 'stars' column which has star rating of a business. So, we will drop the rest of the columns. Also, we train the model on a million reviews only by trimming the size of the dataset."
      ]
    },
    {
      "metadata": {
        "id": "5GNSCSoXl-Pk",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "r.drop(r.index[1000000:], axis=0, inplace=True)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "21JtPw2LmCIz",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "r.drop(labels=['review_id','user_id','useful','funny','cool'],axis=1, inplace=True)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "4ewGdK0iB77z",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "For predictinig sentiment, we first convert star rating to sentiment\n",
        "\n",
        "positive sentiment => star rating of 3 or above\n",
        "\n",
        "negative sentiment => star rating of 2 or below"
      ]
    },
    {
      "metadata": {
        "id": "gKSh2Gt6mEqK",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "r['sentiment'] = r['stars'].apply(lambda star: 0 if star<3 else 1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "mWzU1fsmmGW2",
        "colab_type": "code",
        "outputId": "b6ce9710-19d5-489a-acbb-e55ecc9eec40",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 514
        }
      },
      "cell_type": "code",
      "source": [
        "r.head(15)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>business_id</th>\n",
              "      <th>stars</th>\n",
              "      <th>date</th>\n",
              "      <th>text</th>\n",
              "      <th>sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>iCQpiavjjPzJ5_3gPD5Ebg</td>\n",
              "      <td>2</td>\n",
              "      <td>2011-02-25</td>\n",
              "      <td>The pizza was okay. Not the best I've had. I p...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>pomGBqfbxcqPv14c3XH-ZQ</td>\n",
              "      <td>5</td>\n",
              "      <td>2012-11-13</td>\n",
              "      <td>I love this place! My fiance And I go here atl...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>jtQARsP6P-LbkyjbO1qNGg</td>\n",
              "      <td>1</td>\n",
              "      <td>2014-10-23</td>\n",
              "      <td>Terrible. Dry corn bread. Rib tips were all fa...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>elqbBhBfElMNSrjFqW3now</td>\n",
              "      <td>2</td>\n",
              "      <td>2011-02-25</td>\n",
              "      <td>Back in 2005-2007 this place was my FAVORITE t...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Ums3gaP2qM3W1XcA5r6SsQ</td>\n",
              "      <td>5</td>\n",
              "      <td>2014-09-05</td>\n",
              "      <td>Delicious healthy food. The steak is amazing. ...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>vgfcTvK81oD4r50NMjU2Ag</td>\n",
              "      <td>1</td>\n",
              "      <td>2011-02-25</td>\n",
              "      <td>This place sucks. The customer service is horr...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>AxeQEz3-s9_1TyIo-G7UQw</td>\n",
              "      <td>5</td>\n",
              "      <td>2011-10-10</td>\n",
              "      <td>If you like Thai food, you have to try the ori...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>zdE82PiD6wquvjYLyhOJNA</td>\n",
              "      <td>5</td>\n",
              "      <td>2012-04-18</td>\n",
              "      <td>AMAZING!!!\\r\\n\\r\\n I was referred here by a fr...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>EAwh1OmG6t6p3nRaZOW_AA</td>\n",
              "      <td>4</td>\n",
              "      <td>2011-02-25</td>\n",
              "      <td>Ribs = amazing\\r\\n2 hour wait time= not so ama...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>atVh8viqTj-sqDJ35tAYVg</td>\n",
              "      <td>2</td>\n",
              "      <td>2012-11-09</td>\n",
              "      <td>Food is pretty good, not gonna lie. BUT you ha...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>yFumR3CWzpfvTH2FCthvVw</td>\n",
              "      <td>5</td>\n",
              "      <td>2016-06-15</td>\n",
              "      <td>I have been an Emerald Club member for a numbe...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>UBv8heCQR0RPnUQG0zkXIQ</td>\n",
              "      <td>1</td>\n",
              "      <td>2016-09-23</td>\n",
              "      <td>The score should be negative. Its HORRIBLE. Th...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>hdgYnadxg0GANhWOJabr2g</td>\n",
              "      <td>5</td>\n",
              "      <td>2014-08-23</td>\n",
              "      <td>I went there twice and I am pretty happy with ...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>yEOu75XjwczngvWWlr0M_A</td>\n",
              "      <td>4</td>\n",
              "      <td>2016-02-17</td>\n",
              "      <td>Great for the price, only $25 for long hair! W...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>f5O7v_X_jCg2itqacRfxhg</td>\n",
              "      <td>5</td>\n",
              "      <td>2017-10-12</td>\n",
              "      <td>Sansotei serves some top notch ramen. They tak...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "               business_id  stars        date  \\\n",
              "0   iCQpiavjjPzJ5_3gPD5Ebg      2  2011-02-25   \n",
              "1   pomGBqfbxcqPv14c3XH-ZQ      5  2012-11-13   \n",
              "2   jtQARsP6P-LbkyjbO1qNGg      1  2014-10-23   \n",
              "3   elqbBhBfElMNSrjFqW3now      2  2011-02-25   \n",
              "4   Ums3gaP2qM3W1XcA5r6SsQ      5  2014-09-05   \n",
              "5   vgfcTvK81oD4r50NMjU2Ag      1  2011-02-25   \n",
              "6   AxeQEz3-s9_1TyIo-G7UQw      5  2011-10-10   \n",
              "7   zdE82PiD6wquvjYLyhOJNA      5  2012-04-18   \n",
              "8   EAwh1OmG6t6p3nRaZOW_AA      4  2011-02-25   \n",
              "9   atVh8viqTj-sqDJ35tAYVg      2  2012-11-09   \n",
              "10  yFumR3CWzpfvTH2FCthvVw      5  2016-06-15   \n",
              "11  UBv8heCQR0RPnUQG0zkXIQ      1  2016-09-23   \n",
              "12  hdgYnadxg0GANhWOJabr2g      5  2014-08-23   \n",
              "13  yEOu75XjwczngvWWlr0M_A      4  2016-02-17   \n",
              "14  f5O7v_X_jCg2itqacRfxhg      5  2017-10-12   \n",
              "\n",
              "                                                 text  sentiment  \n",
              "0   The pizza was okay. Not the best I've had. I p...          0  \n",
              "1   I love this place! My fiance And I go here atl...          1  \n",
              "2   Terrible. Dry corn bread. Rib tips were all fa...          0  \n",
              "3   Back in 2005-2007 this place was my FAVORITE t...          0  \n",
              "4   Delicious healthy food. The steak is amazing. ...          1  \n",
              "5   This place sucks. The customer service is horr...          0  \n",
              "6   If you like Thai food, you have to try the ori...          1  \n",
              "7   AMAZING!!!\\r\\n\\r\\n I was referred here by a fr...          1  \n",
              "8   Ribs = amazing\\r\\n2 hour wait time= not so ama...          1  \n",
              "9   Food is pretty good, not gonna lie. BUT you ha...          0  \n",
              "10  I have been an Emerald Club member for a numbe...          1  \n",
              "11  The score should be negative. Its HORRIBLE. Th...          0  \n",
              "12  I went there twice and I am pretty happy with ...          1  \n",
              "13  Great for the price, only $25 for long hair! W...          1  \n",
              "14  Sansotei serves some top notch ramen. They tak...          1  "
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "metadata": {
        "id": "gw0R3YCIDA-O",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Let us see number of positive and negative sentiment samples"
      ]
    },
    {
      "metadata": {
        "id": "7uSG-RjwmMGC",
        "colab_type": "code",
        "outputId": "d504e484-65a0-46ff-8a9a-f83e8b7b0edd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "cell_type": "code",
      "source": [
        "r[r['sentiment']==0].count()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "business_id    267954\n",
              "stars          267954\n",
              "date           267954\n",
              "text           267954\n",
              "sentiment      267954\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "metadata": {
        "id": "PpkAfPiomSWN",
        "colab_type": "code",
        "outputId": "5e7d09f3-632b-4c8e-8420-eb9b974460fc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "cell_type": "code",
      "source": [
        "r[r['sentiment']==1].count()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "business_id    732046\n",
              "stars          732046\n",
              "date           732046\n",
              "text           732046\n",
              "sentiment      732046\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "metadata": {
        "id": "qMS2mADjDMs0",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "We see that dataset is imbalanced. There are more positive sentiment samples than negative sentiment samples. So, we will create a dataset with equal positive and negative samples."
      ]
    },
    {
      "metadata": {
        "id": "wlEtVlLfmVQD",
        "colab_type": "code",
        "outputId": "bd6e4915-efe2-4a21-9350-85b2e4d9d6b4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "cell_type": "code",
      "source": [
        "id = r[r['sentiment']==1].index[-464092:]\n",
        "id"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Int64Index([366270, 366271, 366272, 366273, 366274, 366276, 366277, 366278,\n",
              "            366280, 366281,\n",
              "            ...\n",
              "            999987, 999988, 999990, 999991, 999992, 999993, 999994, 999995,\n",
              "            999997, 999998],\n",
              "           dtype='int64', length=464092)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "metadata": {
        "id": "bz2KDrbqmW9j",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "r.drop(id, axis = 0, inplace = True)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "lFQOaMQVmZbG",
        "colab_type": "code",
        "outputId": "545fa9d5-c9a8-44c9-b913-c49b59458724",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "cell_type": "code",
      "source": [
        "r[r['sentiment']==1].count()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "business_id    267954\n",
              "stars          267954\n",
              "date           267954\n",
              "text           267954\n",
              "sentiment      267954\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "metadata": {
        "id": "wx3i1tGamcFi",
        "colab_type": "code",
        "outputId": "31b72f53-2f5a-41f9-95df-318de0aa7ae9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "len(r)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "535908"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "metadata": {
        "id": "BEfhHq2YFyIp",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "we will first extract the labels in 'labels' list"
      ]
    },
    {
      "metadata": {
        "id": "zSHzgmE-mfFR",
        "colab_type": "code",
        "outputId": "c444606d-d294-4d48-b590-8553b09dba58",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "labels = r['sentiment']\n",
        "labels = labels.tolist()\n",
        "labels[0]"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "metadata": {
        "id": "zzURuZKHui8l",
        "colab_type": "code",
        "outputId": "ef9be05d-4304-422d-be2c-360e34359f36",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "cell_type": "code",
      "source": [
        "import nltk\n",
        "nltk.download('stopwords')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "metadata": {
        "id": "OQwVyf_VufKp",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from nltk.corpus import stopwords \n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.tokenize import RegexpTokenizer\n",
        "import re\n",
        "\n",
        "stop_words = set(stopwords.words('english'))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "16l__jpVuBaV",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def process_row(arow):\n",
        "  sentence = arow.lower()\n",
        "  tokenizer = RegexpTokenizer(r\"\\w+\")\n",
        "  word_tokens = tokenizer.tokenize(sentence) \n",
        "  filtered_sentence = []   \n",
        "  for w in word_tokens: \n",
        "    if w not in stop_words: \n",
        "      filtered_sentence.append(w)\n",
        "  return filtered_sentence"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "1TE6z2i3F9pS",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Let us also extract all the reviews in a list 'para'. This list contains reviews of variable length."
      ]
    },
    {
      "metadata": {
        "id": "v_Cdm_QCmoxQ",
        "colab_type": "code",
        "outputId": "17c8ba00-0d97-4b29-ab93-dd1d2a4c28f6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "cell_type": "code",
      "source": [
        "#para = r['text'].apply(lambda row: process_row(row))\n",
        "para = r['text']\n",
        "para = para.tolist()\n",
        "para[0]"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "\"The pizza was okay. Not the best I've had. I prefer Biaggio's on Flamingo / Fort Apache. The chef there can make a MUCH better NY style pizza. The pizzeria @ Cosmo was over priced for the quality and lack of personality in the food. Biaggio's is a much better pick if youre going for italian - family owned, home made recipes, people that actually CARE if you like their food. You dont get that at a pizzeria in a casino. I dont care what you say...\""
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "metadata": {
        "id": "41SuR6aZvd2c",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "mylist = []\n",
        "for p in para:\n",
        "  mylist.append(p)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "kK02N8zttpns",
        "colab_type": "code",
        "outputId": "f0778283-5366-4df0-d6d6-958958f0000e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "len(para)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "535908"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "metadata": {
        "id": "X7S-2K03upmT",
        "colab_type": "code",
        "outputId": "b26c3242-7cb6-40b5-a434-eb4629763bce",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "len(para[2])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "156"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "metadata": {
        "id": "3fJySUmpu8Hq",
        "colab_type": "code",
        "outputId": "789c09f8-b1c0-497c-dcfa-96b0821beb39",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "type(para)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "list"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "metadata": {
        "id": "VixU5rGWGp96",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Now our task is to extract features from reviews which can then be used by classifier to classify a review into positive sentiment and negative sentiment. So, the most commonly used method to convert a review into a feature vector is bag of words method. We split a review into individual words in this method. \n",
        "\n",
        "One simpler approach could be to create a feature vector by using frequencies of the words in the review. But this approach assigns equal weights to two words with same frequency in a single review. So, it does not consider importance of words from entire corpus point of view.\n",
        "\n",
        "The other approach which is more sophisticated is to create a feature vector by assigning TF-IDF score for each word. Now, TF-IDF assign less weight to the words which occur frequently in entire corpus and more weight for the words which occur rarely. So, the stop words like 'the', 'and' will have less weight as they appear very frequently and would simply carry no meaning.\n",
        "\n",
        "But , this simple bag of words with TF-IDF does not retain the word order and thus the context of the words is lost. \n",
        "\n",
        "Hence, we have used bag of bi-grams method for feature extraction where we consider a group of two consecutive words as a single word. For examplel, \"Pizza was not good\" would consider 'not good' as a single word. This word 'not good' might appear in some negative sentiment reviews. Thus, bi-grams preserve the sentiment of a review by preserving context of a review.\n",
        "\n",
        "SKLearn library provides TfidfVectorizer which actually convers reviews into feature vectors by assigning TF-IDF scores to words."
      ]
    },
    {
      "metadata": {
        "id": "zoxe1380mupE",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from datetime import datetime \n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.svm import LinearSVC\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import confusion_matrix"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "q9OZjWVMs_Af",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "vectorizer = TfidfVectorizer(ngram_range=(1,2))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "6_IRZVbStGsK",
        "colab_type": "code",
        "outputId": "b4158416-4c59-4aed-cd36-cc06c15e7d6a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "type(vectorizer)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "sklearn.feature_extraction.text.TfidfVectorizer"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "metadata": {
        "id": "mNEEhBtXtQcG",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "vectors = vectorizer.fit_transform(para)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "gezolGhStYsB",
        "colab_type": "code",
        "outputId": "c2f0823f-43cd-4fc7-822e-8b9fa5fe656e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "vectors.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(535908, 5481442)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "metadata": {
        "id": "6I0eM-pPtzzO",
        "colab_type": "code",
        "outputId": "b76bf3a1-de83-429b-a739-3f328c656c64",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "cell_type": "code",
      "source": [
        "vectors[0]"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<1x5481442 sparse matrix of type '<class 'numpy.float64'>'\n",
              "\twith 134 stored elements in Compressed Sparse Row format>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "metadata": {
        "id": "cagp_kOBQaIR",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Before we train our classifier, we need to split the dataset into train and test to measure the performance of the classifier. We have used train_test_split functionality provided by SKLearn. It splits the dataset into 66% training data and 33% testing data."
      ]
    },
    {
      "metadata": {
        "id": "sEMU1l_IoF_w",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(vectors, labels, test_size=0.33, random_state=42)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "n4UKHOe3w0Tx",
        "colab_type": "code",
        "outputId": "14cbe97b-76f4-4cb7-bb23-24022fd3f6d8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "len(y_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "359058"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        }
      ]
    },
    {
      "metadata": {
        "id": "4Zzuy810w8D1",
        "colab_type": "code",
        "outputId": "16e6290d-09d1-4f71-c942-b8826099b17c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "len(y_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "176850"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "metadata": {
        "id": "dzHHPmmgPZ0S",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Now, we have feature vectors for all the reviews where similar sentiment reviews have similar feature vectors. So, we can train a classifier to learn a decision boundary between positive and negative sentiment reviews.\n",
        "\n",
        "We are using linear SVM classifier provided by SKLearn."
      ]
    },
    {
      "metadata": {
        "id": "9UCMmP6dowBM",
        "colab_type": "code",
        "outputId": "e4e62421-f725-4e3a-ae07-15d313a6fbf1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "cell_type": "code",
      "source": [
        "classifier = LinearSVC()\n",
        "\n",
        "classifier.fit(X_train, y_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearSVC(C=1.0, class_weight=None, dual=True, fit_intercept=True,\n",
              "     intercept_scaling=1, loss='squared_hinge', max_iter=1000,\n",
              "     multi_class='ovr', penalty='l2', random_state=None, tol=0.0001,\n",
              "     verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 35
        }
      ]
    },
    {
      "metadata": {
        "id": "J3zNjrcFRZhJ",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Let us test the performace of our classifier on testing data."
      ]
    },
    {
      "metadata": {
        "id": "JuXAcKSmpCNK",
        "colab_type": "code",
        "outputId": "8666c36c-dc47-4e7f-ac17-5c7dbbe8f05c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "cell_type": "code",
      "source": [
        "preds = classifier.predict(X_test)\n",
        "print(list(preds[:10]))\n",
        "print(y_test[:10])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1, 0, 1, 1, 0, 0, 1, 0, 1, 1]\n",
            "[0, 0, 1, 1, 0, 0, 1, 0, 1, 0]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "adyxXSJ3wmmD",
        "colab_type": "code",
        "outputId": "69caad3d-6e1c-408a-ee3d-6b5d14d04c4a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "classifier.score(X_test, y_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9422335312411648"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        }
      ]
    },
    {
      "metadata": {
        "id": "tTmQyY8GpR1g",
        "colab_type": "code",
        "outputId": "658330de-ae6f-47ef-a4ac-f2a08cd36e1f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        }
      },
      "cell_type": "code",
      "source": [
        "print (classification_report(y_test, preds))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.94      0.95      0.94     88370\n",
            "           1       0.95      0.93      0.94     88480\n",
            "\n",
            "   micro avg       0.94      0.94      0.94    176850\n",
            "   macro avg       0.94      0.94      0.94    176850\n",
            "weighted avg       0.94      0.94      0.94    176850\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "7uLlMaxLqOLB",
        "colab_type": "code",
        "outputId": "900fb2c7-532c-4a34-c2e6-5a5cf2da75ab",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "cell_type": "code",
      "source": [
        "print(confusion_matrix(y_test, preds))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[83974  4396]\n",
            " [ 5820 82660]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "VJdocH02Rl4j",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "We see that we are getting almost 94% accuracy on test data. Thus, our classifier correctly predicts the sentiment of a review.\n",
        "\n",
        "The sentiment analysis can be used in wide variety of applications e.g. predicting the sentiment of a trending or current topic like elections on social media platform like Twitter. It can also be used by governments across globe to gauge public opinion about a policy announcement or campaign messages for elections.\n",
        "\n",
        "Companies also can use it as a part of their market survey for a particular product. \n",
        "\n",
        "For this particular task, restaurants can use review sentiments as a feedback of their service or as part of their market survey. They can also make use of word cloud if they find negative sentiments to know exactly where they need to improve."
      ]
    },
    {
      "metadata": {
        "id": "JfsGkH89vao-",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "We could extend this sentiment analysis to predict actual rating out of 5 given reviews. \n",
        "We can also extract features from text using something like word embeddings as bag of words suffers from sparsity and high dimensionality. Word or Paragraph embeddings provides a unique feature vector for every review. It is basically implemented as a neural network that predicts next word in a sentence given a context of other words. So, paragraph/ word vectors are learned by neural network using stochastic gradient descent and backpropogation. This approach gives a vector of fixed size for every review. It also presernes semantics and word order.\n",
        "Feature vector in that semantic space are similar for similar words like 'good' and 'great'. Also, matrix operations can be carried out on feature vectors. e.g.\n",
        "\n",
        "King - Man + Woman => Queen\n",
        "\n",
        "You get queen as the answer because distance between King and Queen is same as distance between Man and Woman"
      ]
    }
  ]
}
